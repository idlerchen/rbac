{"remainingRequest":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\tools\\vue-filename-injector\\src\\lib\\injector.js!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\layouts\\HeaderAside\\components\\panel-search\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\layouts\\HeaderAside\\components\\panel-search\\index.vue","mtime":1578716164472},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\tools\\vue-filename-injector\\src\\lib\\injector.js","mtime":1578716163426}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Fuse from 'fuse.js'\nimport { mapState } from 'vuex'\nimport mixin from '../mixin/menu'\nexport default {\n  mixins: [\n    mixin\n  ],\n  components: {\n    'd2-panel-search-item': () => import('./components/panel-search-item/index.vue')\n  },\n  data () {\n    return {\n      searchText: '',\n      results: []\n    }\n  },\n  computed: {\n    ...mapState('d2admin/search', [\n      'hotkey',\n      'pool'\n    ]),\n    // 这份数据是展示在搜索面板下面的\n    resultsList () {\n      return (this.results.length === 0 && this.searchText === '') ? this.pool.map(e => ({\n        value: e.fullTitle,\n        ...e\n      })) : this.results\n    }\n  },\n  methods: {\n    /**\n     * @description 过滤选项 这个方法在每次输入框的值发生变化时会触发\n     */\n    querySearch (queryString, callback) {\n      var pool = this.pool\n      const results = this.query(queryString ? pool : [], queryString)\n      this.results = results\n      callback(results)\n    },\n    /**\n     * @description 指定的数据源中根据指定的查询字符串过滤数据\n     * @param {Object} pool 需要过滤的数据\n     * @param {String} queryString 查询字符串\n     */\n    query (pool, queryString) {\n      return new Fuse(pool, {\n        shouldSort: true,\n        tokenize: true,\n        threshold: 0.6,\n        location: 0,\n        distance: 100,\n        maxPatternLength: 32,\n        minMatchCharLength: 1,\n        keys: [\n          'fullTitle',\n          'path'\n        ]\n      })\n        .search(queryString)\n        .map(e => ({\n          value: e.fullTitle,\n          ...e\n        }))\n    },\n    /**\n     * @description 聚焦输入框\n     */\n    focus () {\n      this.input = ''\n      setTimeout(() => {\n        if (this.$refs.input) {\n          this.$refs.input.focus()\n        }\n        // 还原\n        this.searchText = ''\n        this.results = []\n      }, 500)\n    },\n    /**\n     * @description 接收用户在列表中选择项目的事件\n     */\n    handleResultsGroupItemClick (path) {\n      // 如果用户选择的就是当前页面 就直接关闭搜索面板\n      if (path === this.$route.path) {\n        this.handleEsc()\n        return\n      }\n      // 用户选择的是其它页面\n      this.handleMenuSelect(path)\n    },\n    /**\n     * @description 接收用户在下拉菜单中选中事件\n     */\n    handleSelect ({ path }) {\n      // 如果用户选择的就是当前页面 就直接关闭搜索面板\n      if (path === this.$route.path) {\n        this.handleEsc()\n        return\n      }\n      // 用户选择的是其它页面\n      this.$nextTick(() => {\n        this.handleMenuSelect(path)\n      })\n    },\n    /**\n     * @augments 关闭输入框的下拉菜单\n     */\n    closeSuggestion () {\n      if (this.$refs.input.activated) {\n        this.$refs.input.suggestions = []\n        this.$refs.input.activated = false\n      }\n    },\n    /**\n     * @augments 接收用户点击空白区域的关闭\n     */\n    handlePanelClick () {\n      this.handleEsc()\n    },\n    /**\n     * @augments 接收用户触发的关闭\n     */\n    handleEsc () {\n      this.closeSuggestion()\n      this.$nextTick(() => {\n        this.$emit('close')\n      })\n    }\n  }\n}\n",null]}