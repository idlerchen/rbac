{"remainingRequest":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\tools\\vue-filename-injector\\src\\lib\\injector.js!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\layouts\\HeaderAside\\components\\menu-header\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\layouts\\HeaderAside\\components\\menu-header\\index.vue","mtime":1578716164469},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\tools\\vue-filename-injector\\src\\lib\\injector.js","mtime":1578716163426}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { throttle } from 'lodash'\nimport { mapState } from 'vuex'\nimport menuMixin from '../mixin/menu'\nimport d2LayoutMainMenuItem from '../components/menu-item/index.vue'\nimport d2LayoutMainMenuSub from '../components/menu-sub/index.vue'\nexport default {\n  name: 'd2-layout-header-aside-menu-header',\n  mixins: [\n    menuMixin\n  ],\n  components: {\n    'd2-layout-header-aside-menu-item': d2LayoutMainMenuItem,\n    'd2-layout-header-aside-menu-sub': d2LayoutMainMenuSub\n  },\n  computed: {\n    ...mapState('d2admin/menu', [\n      'header'\n    ])\n  },\n  data () {\n    return {\n      active: '',\n      isScroll: false,\n      scrollWidth: 0,\n      contentWidth: 0,\n      currentTranslateX: 0,\n      throttledCheckScroll: null\n    }\n  },\n  watch: {\n    '$route.matched': {\n      handler (val) {\n        this.active = val[val.length - 1].path\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    scroll (direction) {\n      if (direction === 'left') {\n        // 向右滚动\n        this.currentTranslateX = 0\n      } else {\n        // 向左滚动\n        if (this.contentWidth * 2 - this.currentTranslateX <= this.scrollWidth) {\n          this.currentTranslateX -= this.contentWidth\n        } else {\n          this.currentTranslateX = this.contentWidth - this.scrollWidth\n        }\n      }\n    },\n    checkScroll () {\n      let contentWidth = this.$refs.content.clientWidth\n      let scrollWidth = this.$refs.scroll.clientWidth\n      if (this.isScroll) {\n        // 页面依旧允许滚动的情况，需要更新width\n        if (this.contentWidth - this.scrollWidth === this.currentTranslateX) {\n          // currentTranslateX 也需要相应变化【在右端到头的情况时】\n          this.currentTranslateX = contentWidth - scrollWidth\n          // 快速的滑动依旧存在判断和计算时对应的contentWidth变成正数，所以需要限制一下\n          if (this.currentTranslateX > 0) {\n            this.currentTranslateX = 0\n          }\n        }\n        // 更新元素数据\n        this.contentWidth = contentWidth\n        this.scrollWidth = scrollWidth\n        // 判断何时滚动消失: 当scroll > content\n        if (contentWidth > scrollWidth) {\n          this.isScroll = false\n        }\n      }\n      // 判断何时滚动出现: 当scroll < content\n      if (!this.isScroll && contentWidth < scrollWidth) {\n        this.isScroll = true\n        // 注意，当isScroll变为true，对应的元素盒子大小会发生变化\n        this.$nextTick(() => {\n          contentWidth = this.$refs.content.clientWidth\n          scrollWidth = this.$refs.scroll.clientWidth\n          this.contentWidth = contentWidth\n          this.scrollWidth = scrollWidth\n          this.currentTranslateX = 0\n        })\n      }\n    }\n  },\n  mounted () {\n    // 初始化判断\n    // 默认判断父元素和子元素的大小，以确定初始情况是否显示滚动\n    window.addEventListener('load', this.checkScroll)\n    // 全局窗口变化监听，判断父元素和子元素的大小，从而控制isScroll的开关\n    this.throttledCheckScroll = throttle(this.checkScroll, 300)\n    window.addEventListener('resize', this.throttledCheckScroll)\n  },\n  beforeDestroy () {\n    // 取消监听\n    window.removeEventListener('resize', this.throttledCheckScroll)\n    window.removeEventListener('load', this.checkScroll)\n  }\n}\n",null]}