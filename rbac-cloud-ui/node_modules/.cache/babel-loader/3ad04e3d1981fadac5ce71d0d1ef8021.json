{"remainingRequest":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\store\\modules\\d2admin\\modules\\db.js","dependencies":[{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\store\\modules\\d2admin\\modules\\db.js","mtime":1578716163414},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import util from '@/libs/util';\nimport router from '@/router';\nimport { cloneDeep } from 'lodash';\n/**\n * @description 检查路径是否存在 不存在的话初始化\n * @param {Object} param dbName {String} 数据库名称\n * @param {Object} param path {String} 路径\n * @param {Object} param user {Boolean} 区分用户\n * @param {Object} param validator {Function} 数据校验钩子 返回 true 表示验证通过\n * @param {Object} param defaultValue {*} 初始化默认值\n * @returns {String} 可以直接使用的路径\n */\n\nfunction pathInit(_ref) {\n  var _ref$dbName = _ref.dbName,\n      dbName = _ref$dbName === void 0 ? 'database' : _ref$dbName,\n      _ref$path = _ref.path,\n      path = _ref$path === void 0 ? '' : _ref$path,\n      _ref$user = _ref.user,\n      user = _ref$user === void 0 ? true : _ref$user,\n      _ref$validator = _ref.validator,\n      validator = _ref$validator === void 0 ? function () {\n    return true;\n  } : _ref$validator,\n      _ref$defaultValue = _ref.defaultValue,\n      defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue;\n  var uuid = util.cookies.get('uuid') || 'ghost-uuid';\n  var currentPath = \"\".concat(dbName, \".\").concat(user ? \"user.\".concat(uuid) : 'public').concat(path ? \".\".concat(path) : '');\n  var value = util.db.get(currentPath).value();\n\n  if (!(value !== undefined && validator(value))) {\n    util.db.set(currentPath, defaultValue).write();\n  }\n\n  return currentPath;\n}\n\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 将数据存储到指定位置 | 路径不存在会自动初始化\n     * @description 效果类似于取值 dbName.path = value\n     * @param {Object} param dbName {String} 数据库名称\n     * @param {Object} param path {String} 存储路径\n     * @param {Object} param value {*} 需要存储的值\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    set: function set(context, _ref2) {\n      var _ref2$dbName = _ref2.dbName,\n          dbName = _ref2$dbName === void 0 ? 'database' : _ref2$dbName,\n          _ref2$path = _ref2.path,\n          path = _ref2$path === void 0 ? '' : _ref2$path,\n          _ref2$value = _ref2.value,\n          value = _ref2$value === void 0 ? '' : _ref2$value,\n          _ref2$user = _ref2.user,\n          user = _ref2$user === void 0 ? false : _ref2$user;\n      util.db.set(pathInit({\n        dbName: dbName,\n        path: path,\n        user: user\n      }), value).write();\n    },\n\n    /**\n     * @description 获取数据\n     * @description 效果类似于取值 dbName.path || defaultValue\n     * @param {Object} param dbName {String} 数据库名称\n     * @param {Object} param path {String} 存储路径\n     * @param {Object} param defaultValue {*} 取值失败的默认值\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    get: function get(context, _ref3) {\n      var _ref3$dbName = _ref3.dbName,\n          dbName = _ref3$dbName === void 0 ? 'database' : _ref3$dbName,\n          _ref3$path = _ref3.path,\n          path = _ref3$path === void 0 ? '' : _ref3$path,\n          _ref3$defaultValue = _ref3.defaultValue,\n          defaultValue = _ref3$defaultValue === void 0 ? '' : _ref3$defaultValue,\n          _ref3$user = _ref3.user,\n          user = _ref3$user === void 0 ? false : _ref3$user;\n      return new Promise(function (resolve) {\n        resolve(cloneDeep(util.db.get(pathInit({\n          dbName: dbName,\n          path: path,\n          user: user,\n          defaultValue: defaultValue\n        })).value()));\n      });\n    },\n\n    /**\n     * @description 获取存储数据库对象\n     * @param {Object} context context\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    database: function database(context) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref4$user = _ref4.user,\n          user = _ref4$user === void 0 ? false : _ref4$user;\n\n      return new Promise(function (resolve) {\n        resolve(util.db.get(pathInit({\n          dbName: 'database',\n          path: '',\n          user: user,\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 清空存储数据库对象\n     * @param {Object} context context\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databaseClear: function databaseClear(context) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$user = _ref5.user,\n          user = _ref5$user === void 0 ? false : _ref5$user;\n\n      return new Promise(function (resolve) {\n        resolve(util.db.get(pathInit({\n          dbName: 'database',\n          path: '',\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 获取存储数据库对象 [ 区分页面 ]\n     * @param {Object} context context\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databasePage: function databasePage(context) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref6$basis = _ref6.basis,\n          basis = _ref6$basis === void 0 ? 'fullPath' : _ref6$basis,\n          _ref6$user = _ref6.user,\n          user = _ref6$user === void 0 ? false : _ref6$user;\n\n      return new Promise(function (resolve) {\n        resolve(util.db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(router.app.$route[basis]),\n          user: user,\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 清空存储数据库对象 [ 区分页面 ]\n     * @param {Object} context context\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    databasePageClear: function databasePageClear(context) {\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref7$basis = _ref7.basis,\n          basis = _ref7$basis === void 0 ? 'fullPath' : _ref7$basis,\n          _ref7$user = _ref7.user,\n          user = _ref7$user === void 0 ? false : _ref7$user;\n\n      return new Promise(function (resolve) {\n        resolve(util.db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(router.app.$route[basis]),\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: {}\n        })));\n      });\n    },\n\n    /**\n     * @description 快速将页面当前的数据 ( $data ) 持久化\n     * @param {Object} context context\n     * @param {Object} param instance {Object} vue 实例\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageSet: function pageSet(context, _ref8) {\n      var instance = _ref8.instance,\n          _ref8$basis = _ref8.basis,\n          basis = _ref8$basis === void 0 ? 'fullPath' : _ref8$basis,\n          _ref8$user = _ref8.user,\n          user = _ref8$user === void 0 ? false : _ref8$user;\n      return new Promise(function (resolve) {\n        resolve(util.db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(router.app.$route[basis], \".$data\"),\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: cloneDeep(instance.$data)\n        })));\n      });\n    },\n\n    /**\n     * @description 快速获取页面快速持久化的数据\n     * @param {Object} context context\n     * @param {Object} param instance {Object} vue 实例\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageGet: function pageGet(context, _ref9) {\n      var instance = _ref9.instance,\n          _ref9$basis = _ref9.basis,\n          basis = _ref9$basis === void 0 ? 'fullPath' : _ref9$basis,\n          _ref9$user = _ref9.user,\n          user = _ref9$user === void 0 ? false : _ref9$user;\n      return new Promise(function (resolve) {\n        resolve(cloneDeep(util.db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(router.app.$route[basis], \".$data\"),\n          user: user,\n          defaultValue: cloneDeep(instance.$data)\n        })).value()));\n      });\n    },\n\n    /**\n     * @description 清空页面快照\n     * @param {Object} context context\n     * @param {Object} param basis {String} 页面区分依据 [ name | path | fullPath ]\n     * @param {Object} param user {Boolean} 是否区分用户\n     */\n    pageClear: function pageClear(context, _ref10) {\n      var _ref10$basis = _ref10.basis,\n          basis = _ref10$basis === void 0 ? 'fullPath' : _ref10$basis,\n          _ref10$user = _ref10.user,\n          user = _ref10$user === void 0 ? false : _ref10$user;\n      return new Promise(function (resolve) {\n        resolve(util.db.get(pathInit({\n          dbName: 'database',\n          path: \"$page.\".concat(router.app.$route[basis], \".$data\"),\n          user: user,\n          validator: function validator() {\n            return false;\n          },\n          defaultValue: {}\n        })));\n      });\n    }\n  }\n};",null]}