{"remainingRequest":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\store\\modules\\d2admin\\modules\\account.js","dependencies":[{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\store\\modules\\d2admin\\modules\\account.js","mtime":1578716163350},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\IDEA_WorkSpace\\\\mygit_project\\\\rbac\\\\rbac-cloud-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { Message, MessageBox } from 'element-ui';\nimport util from '@/libs/util.js';\nimport router from '@/router';\nimport { AccountLogin } from '@api/sys.login';\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 登录\n     * @param {Object} param context\n     * @param {Object} param username {String} 用户账号\n     * @param {Object} param password {String} 密码\n     * @param {Object} param route {Object} 登录成功后定向的路由对象 任何 vue-router 支持的格式\n     */\n    login: function login(_ref) {\n      var dispatch = _ref.dispatch;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$username = _ref2.username,\n          username = _ref2$username === void 0 ? '' : _ref2$username,\n          _ref2$password = _ref2.password,\n          password = _ref2$password === void 0 ? '' : _ref2$password;\n\n      return new Promise(function (resolve, reject) {\n        // 开始请求登录接口\n        AccountLogin({\n          username: username,\n          password: password\n        }).then(\n        /*#__PURE__*/\n        function () {\n          var _ref3 = _asyncToGenerator(\n          /*#__PURE__*/\n          regeneratorRuntime.mark(function _callee(res) {\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    // 设置 cookie 一定要存 uuid 和 token 两个 cookie\n                    // 整个系统依赖这两个数据进行校验和存储\n                    // uuid 是用户身份唯一标识 用户注册的时候确定 并且不可改变 不可重复\n                    // token 代表用户当前登录状态 建议在网络请求中携带 token\n                    // 如有必要 token 需要定时更新，默认保存一天\n                    util.cookies.set('uuid', res.uuid);\n                    util.cookies.set('token', res.token); // 设置 vuex 用户信息\n\n                    _context.next = 4;\n                    return dispatch('d2admin/user/set', {\n                      name: res.name\n                    }, {\n                      root: true\n                    });\n\n                  case 4:\n                    _context.next = 6;\n                    return dispatch('load');\n\n                  case 6:\n                    // 结束\n                    resolve();\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          console.log('err: ', err);\n          reject(err);\n        });\n      });\n    },\n\n    /**\n     * @description 注销用户并返回登录页面\n     * @param {Object} param context\n     * @param {Object} param confirm {Boolean} 是否需要确认\n     */\n    logout: function logout(_ref4) {\n      var commit = _ref4.commit,\n          dispatch = _ref4.dispatch;\n\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$confirm = _ref5.confirm,\n          confirm = _ref5$confirm === void 0 ? false : _ref5$confirm;\n\n      /**\n       * @description 注销\n       */\n      function logout() {\n        return _logout.apply(this, arguments);\n      } // 判断是否需要确认\n\n\n      function _logout() {\n        _logout = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2() {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // 删除cookie\n                  util.cookies.remove('token');\n                  util.cookies.remove('uuid'); // 清空 vuex 用户信息\n\n                  _context2.next = 4;\n                  return dispatch('d2admin/user/set', {}, {\n                    root: true\n                  });\n\n                case 4:\n                  // 跳转路由\n                  router.push({\n                    name: 'login'\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        return _logout.apply(this, arguments);\n      }\n\n      if (confirm) {\n        commit('d2admin/gray/set', true, {\n          root: true\n        });\n        MessageBox.confirm('注销当前账户吗?  打开的标签页和用户设置将会被保存。', '确认操作', {\n          confirmButtonText: '确定注销',\n          cancelButtonText: '放弃',\n          type: 'warning'\n        }).then(function () {\n          commit('d2admin/gray/set', false, {\n            root: true\n          });\n          logout();\n        }).catch(function () {\n          commit('d2admin/gray/set', false, {\n            root: true\n          });\n          Message({\n            message: '放弃注销用户'\n          });\n        });\n      } else {\n        logout();\n      }\n    },\n\n    /**\n     * @description 用户登录后从持久化数据加载一系列的设置\n     * @param {Object} state vuex state\n     */\n    load: function load(_ref6) {\n      var dispatch = _ref6.dispatch;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref7 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(resolve) {\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return dispatch('d2admin/user/load', null, {\n                    root: true\n                  });\n\n                case 2:\n                  _context3.next = 4;\n                  return dispatch('d2admin/theme/load', null, {\n                    root: true\n                  });\n\n                case 4:\n                  _context3.next = 6;\n                  return dispatch('d2admin/transition/load', null, {\n                    root: true\n                  });\n\n                case 6:\n                  _context3.next = 8;\n                  return dispatch('d2admin/page/openedLoad', null, {\n                    root: true\n                  });\n\n                case 8:\n                  _context3.next = 10;\n                  return dispatch('d2admin/menu/asideCollapseLoad', null, {\n                    root: true\n                  });\n\n                case 10:\n                  _context3.next = 12;\n                  return dispatch('d2admin/size/load', null, {\n                    root: true\n                  });\n\n                case 12:\n                  // end\n                  resolve();\n\n                case 13:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x2) {\n          return _ref7.apply(this, arguments);\n        };\n      }());\n    }\n  }\n};",null]}