{"remainingRequest":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\plugin\\axios\\index.js","dependencies":[{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\plugin\\axios\\index.js","mtime":1578716163428},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store from '@/store';\nimport axios from 'axios';\nimport { Message } from 'element-ui';\nimport util from '@/libs/util'; // 创建一个错误\n\nfunction errorCreate(msg) {\n  var error = new Error(msg);\n  errorLog(error);\n  throw error;\n} // 记录和显示错误\n\n\nfunction errorLog(error) {\n  // 添加到日志\n  store.dispatch('d2admin/log/push', {\n    message: '数据请求异常',\n    type: 'danger',\n    meta: {\n      error: error\n    }\n  }); // 打印到控制台\n\n  if (process.env.NODE_ENV === 'development') {\n    util.log.danger('>>>>>> Error >>>>>>');\n    console.log(error);\n  } // 显示提示\n\n\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n} // 创建一个 axios 实例\n\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_API,\n  timeout: 5000 // 请求超时时间\n\n}); // 请求拦截器\n\nservice.interceptors.request.use(function (config) {\n  // 在请求发送之前做一些处理\n  var token = util.cookies.get('token'); // 让每个请求携带token-- ['X-Token']为自定义key 请根据实际情况自行修改\n\n  config.headers['X-Token'] = token;\n  return config;\n}, function (error) {\n  // 发送失败\n  console.log(error);\n  Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  // dataAxios 是 axios 返回数据中的 data\n  var dataAxios = response.data; // 这个状态码是和后端约定的\n\n  var code = dataAxios.code; // 根据 code 进行判断\n\n  if (code === undefined) {\n    // 如果没有 code 代表这不是项目后端开发的接口 比如可能是 D2Admin 请求最新版本\n    return dataAxios;\n  } else {\n    // 有 code 代表这是一个后端接口 可以进行进一步的判断\n    switch (code) {\n      case 0:\n        // [ 示例 ] code === 0 代表没有错误\n        return dataAxios.data;\n\n      case 'xxx':\n        // [ 示例 ] 其它和后台约定的 code\n        errorCreate(\"[ code: xxx ] \".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n\n      default:\n        // 不是正确的 code\n        errorCreate(\"\".concat(dataAxios.msg, \": \").concat(response.config.url));\n        break;\n    }\n  }\n}, function (error) {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '请求错误';\n        break;\n\n      case 401:\n        error.message = '未授权，请登录';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 500:\n        error.message = '服务器内部错误';\n        break;\n\n      case 501:\n        error.message = '服务未实现';\n        break;\n\n      case 502:\n        error.message = '网关错误';\n        break;\n\n      case 503:\n        error.message = '服务不可用';\n        break;\n\n      case 504:\n        error.message = '网关超时';\n        break;\n\n      case 505:\n        error.message = 'HTTP版本不受支持';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  errorLog(error);\n  return Promise.reject(error);\n});\nexport default service;",null]}