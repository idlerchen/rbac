{"remainingRequest":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\components\\d2-container\\components\\mixins\\normal.js","dependencies":[{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\src\\components\\d2-container\\components\\mixins\\normal.js","mtime":1578716163436},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IDEA_WorkSpace\\mygit_project\\rbac\\rbac-cloud-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n// 提供滚动方面的功能\n// 非滚动优化模式通用\nimport { throttle } from 'lodash'; // 生成滚动事件的 handler\n\nfunction handleMaker(wait) {\n  var _this = this;\n\n  return throttle(function (e) {\n    _this.$emit('scroll', {\n      x: e.target.scrollLeft,\n      y: e.target.scrollTop\n    });\n  }, wait);\n}\n\nexport default {\n  props: {\n    // 滚动事件节流间隔\n    scrollDelay: {\n      type: Number,\n      required: false,\n      default: 10\n    }\n  },\n  data: function data() {\n    return {\n      handleScroll: null\n    };\n  },\n  watch: {\n    scrollDelay: function scrollDelay(val) {\n      // 移除旧的监听\n      this.removeScrollListener(); // 生成新的 handle 方法\n\n      this.handleScroll = handleMaker.call(this, val); // 添加新的监听\n\n      this.addScrollListener();\n    }\n  },\n  methods: {\n    // 增加滚动事件监听\n    addScrollListener: function addScrollListener() {\n      if (typeof this.handleScroll !== 'function') {\n        // mounted 生命周期内调用这个方法的时候会进入这里的判断\n        this.handleScroll = handleMaker.call(this, this.scrollDelay);\n      } // 添加监听\n\n\n      this.$refs.body.addEventListener('scroll', this.handleScroll);\n    },\n    // 移除滚动事件监听\n    removeScrollListener: function removeScrollListener() {\n      this.$refs.body.removeEventListener('scroll', this.handleScroll);\n    },\n    // 外部调用的方法 返回顶部\n    scrollToTop: function scrollToTop() {\n      var _this2 = this;\n\n      var smoothscroll = function smoothscroll() {\n        var body = _this2.$refs.body;\n        var currentScroll = body.scrollTop;\n\n        if (currentScroll > 0) {\n          window.requestAnimationFrame(smoothscroll);\n          body.scrollTo(0, currentScroll - currentScroll / 5);\n        }\n      };\n\n      smoothscroll();\n    }\n  }\n};",null]}